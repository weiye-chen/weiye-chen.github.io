<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>William&#39;s Blog</title>
        <link>https://weiye-chen.github.io/</link>
        <description>The website is a personal blog for learning and sharing knowledge.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>chenweiye.thinker@gmail.com (William)</managingEditor>
            <webMaster>chenweiye.thinker@gmail.com (William)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 22 Apr 2025 00:00:00 &#43;0800</lastBuildDate>
            <atom:link href="https://weiye-chen.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>多线程</title>
    <link>https://weiye-chen.github.io/multhread/</link>
    <pubDate>Tue, 22 Apr 2025 00:00:00 &#43;0800</pubDate>
    <author>William</author>
    <guid>https://weiye-chen.github.io/multhread/</guid>
    <description><![CDATA[多线程]]></description>
</item>
<item>
    <title>牛顿迭代法</title>
    <link>https://weiye-chen.github.io/newton-raphson/</link>
    <pubDate>Wed, 01 Nov 2023 08:00:00 &#43;0800</pubDate>
    <author>William</author>
    <guid>https://weiye-chen.github.io/newton-raphson/</guid>
    <description><![CDATA[概述 牛顿迭代法顾名思义是由牛顿提出的一种用于解决方程近似解的方法。本文主要介绍牛顿迭代法的原理及其在求解平方根中的应用。 原理 假设方程$f(x]]></description>
</item>
<item>
    <title>递归算法</title>
    <link>https://weiye-chen.github.io/recursion/</link>
    <pubDate>Wed, 08 Feb 2023 08:00:00 &#43;0800</pubDate>
    <author>William</author>
    <guid>https://weiye-chen.github.io/recursion/</guid>
    <description><![CDATA[概述 递归算法是一种直接或者间接调用自身函数或者方法的算法。简单来说就是程序自身的调用。 递归算法的本质是将问题不断分解为规模缩小的子问题，然后]]></description>
</item>
<item>
    <title>递归优化</title>
    <link>https://weiye-chen.github.io/recursive-optimization/</link>
    <pubDate>Thu, 09 Feb 2023 00:45:40 &#43;0800</pubDate>
    <author>William</author>
    <guid>https://weiye-chen.github.io/recursive-optimization/</guid>
    <description><![CDATA[递归算法 通常来说，递归算法的运行效率很低，容易造成栈溢出。有关递归算法的详细介绍见递归详解。 递归算法优化策略 递归优化策略通常有两种。 时间复杂]]></description>
</item>
</channel>
</rss>
